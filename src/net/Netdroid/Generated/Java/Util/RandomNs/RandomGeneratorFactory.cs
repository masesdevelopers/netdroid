/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Util.RandomNs
{
    #region RandomGeneratorFactory declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html"/>
    /// </summary>
    public partial class RandomGeneratorFactory : MASES.JCOBridge.C2JBridge.JVMBridgeBase<RandomGeneratorFactory>
    {
        const string _bridgeClassName = "java.util.random.RandomGeneratorFactory";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public RandomGeneratorFactory() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public RandomGeneratorFactory(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region RandomGeneratorFactory<T> declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html"/>
    /// </summary>
    /// <typeparam name="T"><see cref="Java.Util.RandomNs.IRandomGenerator"/></typeparam>
    public partial class RandomGeneratorFactory<T> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<RandomGeneratorFactory<T>> where T : Java.Util.RandomNs.IRandomGenerator, new()
    {
        const string _bridgeClassName = "java.util.random.RandomGeneratorFactory";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public RandomGeneratorFactory() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public RandomGeneratorFactory(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region RandomGeneratorFactory implementation
    public partial class RandomGeneratorFactory
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#of(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.RandomNs.RandomGeneratorFactory"/></returns>
        public static Java.Util.RandomNs.RandomGeneratorFactory Of(Java.Lang.String arg0)
        {
            return SExecute<Java.Util.RandomNs.RandomGeneratorFactory>(LocalBridgeClazz, "of", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#getDefault()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.RandomNs.RandomGeneratorFactory"/></returns>
        public static Java.Util.RandomNs.RandomGeneratorFactory GetDefault()
        {
            return SExecute<Java.Util.RandomNs.RandomGeneratorFactory>(LocalBridgeClazz, "getDefault");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#all()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Stream.Stream"/></returns>
        public static Java.Util.Stream.Stream All()
        {
            return SExecute<Java.Util.Stream.Stream>(LocalBridgeClazz, "all");
        }
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isArbitrarilyJumpable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsArbitrarilyJumpable()
        {
            return IExecute<bool>("isArbitrarilyJumpable");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isDeprecated()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDeprecated()
        {
            return IExecute<bool>("isDeprecated");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isHardware()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsHardware()
        {
            return IExecute<bool>("isHardware");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isJumpable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsJumpable()
        {
            return IExecute<bool>("isJumpable");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isLeapable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLeapable()
        {
            return IExecute<bool>("isLeapable");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isSplittable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSplittable()
        {
            return IExecute<bool>("isSplittable");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isStatistical()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStatistical()
        {
            return IExecute<bool>("isStatistical");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isStochastic()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStochastic()
        {
            return IExecute<bool>("isStochastic");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isStreamable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStreamable()
        {
            return IExecute<bool>("isStreamable");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#equidistribution()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int Equidistribution()
        {
            return IExecute<int>("equidistribution");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#stateBits()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int StateBits()
        {
            return IExecute<int>("stateBits");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#group()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String Group()
        {
            return IExecute<Java.Lang.String>("group");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#name()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String Name()
        {
            return IExecute<Java.Lang.String>("name");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#period()"/>
        /// </summary>
        /// <returns><see cref="Java.Math.BigInteger"/></returns>
        public Java.Math.BigInteger Period()
        {
            return IExecute<Java.Math.BigInteger>("period");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#create()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.RandomNs.RandomGenerator"/></returns>
        public Java.Util.RandomNs.RandomGenerator Create()
        {
            return IExecute<Java.Util.RandomNs.RandomGenerator>("create");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#create(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="Java.Util.RandomNs.RandomGenerator"/></returns>
        public Java.Util.RandomNs.RandomGenerator Create(byte[] arg0)
        {
            return IExecute<Java.Util.RandomNs.RandomGenerator>("create", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#create(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="Java.Util.RandomNs.RandomGenerator"/></returns>
        public Java.Util.RandomNs.RandomGenerator Create(long arg0)
        {
            return IExecute<Java.Util.RandomNs.RandomGenerator>("create", arg0);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion

    #region RandomGeneratorFactory<T> implementation
    public partial class RandomGeneratorFactory<T>
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Java.Util.RandomNs.RandomGeneratorFactory{T}"/> to <see cref="Java.Util.RandomNs.RandomGeneratorFactory"/>
        /// </summary>
        public static implicit operator Java.Util.RandomNs.RandomGeneratorFactory(Java.Util.RandomNs.RandomGeneratorFactory<T> t) => t.Cast<Java.Util.RandomNs.RandomGeneratorFactory>();
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#of(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.RandomNs.RandomGeneratorFactory"/></returns>
        public static Java.Util.RandomNs.RandomGeneratorFactory<T> Of(Java.Lang.String arg0)
        {
            return SExecute<Java.Util.RandomNs.RandomGeneratorFactory<T>>(LocalBridgeClazz, "of", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#getDefault()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.RandomNs.RandomGeneratorFactory"/></returns>
        public static Java.Util.RandomNs.RandomGeneratorFactory<Java.Util.RandomNs.RandomGenerator> GetDefault()
        {
            return SExecute<Java.Util.RandomNs.RandomGeneratorFactory<Java.Util.RandomNs.RandomGenerator>>(LocalBridgeClazz, "getDefault");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#all()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Stream.Stream"/></returns>
        public static Java.Util.Stream.Stream<Java.Util.RandomNs.RandomGeneratorFactory<Java.Util.RandomNs.RandomGenerator>> All()
        {
            return SExecute<Java.Util.Stream.Stream<Java.Util.RandomNs.RandomGeneratorFactory<Java.Util.RandomNs.RandomGenerator>>>(LocalBridgeClazz, "all");
        }
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isArbitrarilyJumpable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsArbitrarilyJumpable()
        {
            return IExecute<bool>("isArbitrarilyJumpable");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isDeprecated()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDeprecated()
        {
            return IExecute<bool>("isDeprecated");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isHardware()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsHardware()
        {
            return IExecute<bool>("isHardware");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isJumpable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsJumpable()
        {
            return IExecute<bool>("isJumpable");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isLeapable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLeapable()
        {
            return IExecute<bool>("isLeapable");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isSplittable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSplittable()
        {
            return IExecute<bool>("isSplittable");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isStatistical()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStatistical()
        {
            return IExecute<bool>("isStatistical");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isStochastic()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStochastic()
        {
            return IExecute<bool>("isStochastic");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isStreamable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStreamable()
        {
            return IExecute<bool>("isStreamable");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#equidistribution()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int Equidistribution()
        {
            return IExecute<int>("equidistribution");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#stateBits()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int StateBits()
        {
            return IExecute<int>("stateBits");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#group()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String Group()
        {
            return IExecute<Java.Lang.String>("group");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#name()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String Name()
        {
            return IExecute<Java.Lang.String>("name");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#period()"/>
        /// </summary>
        /// <returns><see cref="Java.Math.BigInteger"/></returns>
        public Java.Math.BigInteger Period()
        {
            return IExecute<Java.Math.BigInteger>("period");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#create()"/>
        /// </summary>
        /// <returns><typeparamref name="T"/></returns>
        public T Create()
        {
            return IExecute<T>("create");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#create(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><typeparamref name="T"/></returns>
        public T Create(byte[] arg0)
        {
            return IExecute<T>("create", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#create(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><typeparamref name="T"/></returns>
        public T Create(long arg0)
        {
            return IExecute<T>("create", arg0);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}