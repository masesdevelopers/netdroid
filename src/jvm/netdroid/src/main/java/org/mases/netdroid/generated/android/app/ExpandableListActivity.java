/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*/

package org.mases.netdroid.generated.android.app;

public final class ExpandableListActivity extends android.app.ExpandableListActivity implements org.mases.jcobridge.IJCListener {
    final org.mases.jcobridge.JCListener _internalListener;

    public ExpandableListActivity(String key) throws org.mases.jcobridge.JCNativeException {
        super();
        _internalListener = new org.mases.jcobridge.JCListener(key);
    }

    public synchronized void release() {
       _internalListener.release();
    }
    
    public synchronized void raiseEvent(String eventName) {
       _internalListener.raiseEvent(eventName);
    }
    
    public synchronized void raiseEvent(String eventName, Object e) {
       _internalListener.raiseEvent(eventName, e);
    }
    
    public synchronized void raiseEvent(String eventName, Object e, Object... objects) {
       _internalListener.raiseEvent(eventName, e, objects);
    }
    
    public Object getEventData() {
       return _internalListener.getEventData();
    }
    
    public boolean hasExtraData() {
       return _internalListener.hasExtraData();
    }
    
    public int extraDataLength() {
       return _internalListener.extraDataLength();
    }
    
    public Object[] extraData() {
       return _internalListener.extraData();
    }
    
    public Object getReturnData() {
       return _internalListener.getReturnData();
    }
    
    public void setReturnData(Object retData) {
       _internalListener.setReturnData(retData);
    }

    //@Override
    public android.app.ActionBar getActionBar() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getActionBar", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getActionBar(); else retVal = eventDataExchange.getReturnData(); return (android.app.ActionBar)retVal;
    }
    //@Override
    public android.app.LoaderManager getLoaderManager() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getLoaderManager", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getLoaderManager(); else retVal = eventDataExchange.getReturnData(); return (android.app.LoaderManager)retVal;
    }
    //@Override
    public android.app.VoiceInteractor getVoiceInteractor() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getVoiceInteractor", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getVoiceInteractor(); else retVal = eventDataExchange.getReturnData(); return (android.app.VoiceInteractor)retVal;
    }
    //@Override
    public android.content.AttributionSource getAttributionSource() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getAttributionSource", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getAttributionSource(); else retVal = eventDataExchange.getReturnData(); return (android.content.AttributionSource)retVal;
    }
    //@Override
    public android.content.ComponentName getComponentName() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getComponentName", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getComponentName(); else retVal = eventDataExchange.getReturnData(); return (android.content.ComponentName)retVal;
    }
    //@Override
    public android.content.ComponentName startForegroundService(android.content.Intent arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("startForegroundService", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.startForegroundService(arg0); else retVal = eventDataExchange.getReturnData(); return (android.content.ComponentName)retVal;
    }
    //@Override
    public android.content.ContentResolver getContentResolver() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getContentResolver", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getContentResolver(); else retVal = eventDataExchange.getReturnData(); return (android.content.ContentResolver)retVal;
    }
    //@Override
    public android.content.Context createAttributionContext(java.lang.String arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("createAttributionContext", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.createAttributionContext(arg0); else retVal = eventDataExchange.getReturnData(); return (android.content.Context)retVal;
    }
    //@Override
    public android.content.Context createConfigurationContext(android.content.res.Configuration arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("createConfigurationContext", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.createConfigurationContext(arg0); else retVal = eventDataExchange.getReturnData(); return (android.content.Context)retVal;
    }
    //@Override
    public android.content.Context createContext(android.content.ContextParams arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("createContext", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.createContext(arg0); else retVal = eventDataExchange.getReturnData(); return (android.content.Context)retVal;
    }
    //@Override
    public android.content.Context createContextForSplit(java.lang.String arg0) throws android.content.pm.PackageManager$NameNotFoundException {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("createContextForSplit", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.createContextForSplit(arg0); else retVal = eventDataExchange.getReturnData(); return (android.content.Context)retVal;
    }
    //@Override
    public android.content.Context createDeviceContext(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("createDeviceContext", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.createDeviceContext(arg0); else retVal = eventDataExchange.getReturnData(); return (android.content.Context)retVal;
    }
    //@Override
    public android.content.Context createDeviceProtectedStorageContext() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("createDeviceProtectedStorageContext", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.createDeviceProtectedStorageContext(); else retVal = eventDataExchange.getReturnData(); return (android.content.Context)retVal;
    }
    //@Override
    public android.content.Context createDisplayContext(android.view.Display arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("createDisplayContext", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.createDisplayContext(arg0); else retVal = eventDataExchange.getReturnData(); return (android.content.Context)retVal;
    }
    //@Override
    public android.content.Context createPackageContext(java.lang.String arg0, int arg1) throws android.content.pm.PackageManager$NameNotFoundException {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("createPackageContext", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.createPackageContext(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (android.content.Context)retVal;
    }
    //@Override
    public android.content.Context createWindowContext(android.view.Display arg0, int arg1, android.os.Bundle arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("createWindowContext", eventDataExchange, arg0, arg1, arg2); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.createWindowContext(arg0, arg1, arg2); else retVal = eventDataExchange.getReturnData(); return (android.content.Context)retVal;
    }
    //@Override
    public android.content.Context createWindowContext(int arg0, android.os.Bundle arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("createWindowContext2", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.createWindowContext(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (android.content.Context)retVal;
    }
    //@Override
    public android.content.Context getApplicationContext() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getApplicationContext", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getApplicationContext(); else retVal = eventDataExchange.getReturnData(); return (android.content.Context)retVal;
    }
    //@Override
    public android.content.Context getBaseContext() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getBaseContext", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getBaseContext(); else retVal = eventDataExchange.getReturnData(); return (android.content.Context)retVal;
    }
    //@Override
    public android.content.pm.ApplicationInfo getApplicationInfo() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getApplicationInfo", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getApplicationInfo(); else retVal = eventDataExchange.getReturnData(); return (android.content.pm.ApplicationInfo)retVal;
    }
    //@Override
    public android.content.res.Resources getResources() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getResources", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getResources(); else retVal = eventDataExchange.getReturnData(); return (android.content.res.Resources)retVal;
    }
    //@Override
    public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String arg0, int arg1, android.database.sqlite.SQLiteDatabase.CursorFactory arg2, android.database.DatabaseErrorHandler arg3) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("openOrCreateDatabase", eventDataExchange, arg0, arg1, arg2, arg3); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.openOrCreateDatabase(arg0, arg1, arg2, arg3); else retVal = eventDataExchange.getReturnData(); return (android.database.sqlite.SQLiteDatabase)retVal;
    }
    //@Override
    public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String arg0, int arg1, android.database.sqlite.SQLiteDatabase.CursorFactory arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("openOrCreateDatabase3", eventDataExchange, arg0, arg1, arg2); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.openOrCreateDatabase(arg0, arg1, arg2); else retVal = eventDataExchange.getReturnData(); return (android.database.sqlite.SQLiteDatabase)retVal;
    }
    //@Override
    public android.net.Uri onProvideReferrer() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onProvideReferrer", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onProvideReferrer(); else retVal = eventDataExchange.getReturnData(); return (android.net.Uri)retVal;
    }
    //@Override
    public android.os.Looper getMainLooper() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getMainLooper", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getMainLooper(); else retVal = eventDataExchange.getReturnData(); return (android.os.Looper)retVal;
    }
    //@Override
    public android.transition.Scene getContentScene() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getContentScene", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getContentScene(); else retVal = eventDataExchange.getReturnData(); return (android.transition.Scene)retVal;
    }
    //@Override
    public android.transition.TransitionManager getContentTransitionManager() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getContentTransitionManager", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getContentTransitionManager(); else retVal = eventDataExchange.getReturnData(); return (android.transition.TransitionManager)retVal;
    }
    //@Override
    public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback arg0, int arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onWindowStartingActionMode", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onWindowStartingActionMode(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (android.view.ActionMode)retVal;
    }
    //@Override
    public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onWindowStartingActionMode1", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onWindowStartingActionMode(arg0); else retVal = eventDataExchange.getReturnData(); return (android.view.ActionMode)retVal;
    }
    //@Override
    public android.view.ActionMode startActionMode(android.view.ActionMode.Callback arg0, int arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("startActionMode", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.startActionMode(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (android.view.ActionMode)retVal;
    }
    //@Override
    public android.view.ActionMode startActionMode(android.view.ActionMode.Callback arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("startActionMode1", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.startActionMode(arg0); else retVal = eventDataExchange.getReturnData(); return (android.view.ActionMode)retVal;
    }
    //@Override
    public android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("requestDragAndDropPermissions", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.requestDragAndDropPermissions(arg0); else retVal = eventDataExchange.getReturnData(); return (android.view.DragAndDropPermissions)retVal;
    }
    //@Override
    public android.view.LayoutInflater getLayoutInflater() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getLayoutInflater", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getLayoutInflater(); else retVal = eventDataExchange.getReturnData(); return (android.view.LayoutInflater)retVal;
    }
    //@Override
    public android.view.View getCurrentFocus() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getCurrentFocus", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getCurrentFocus(); else retVal = eventDataExchange.getReturnData(); return (android.view.View)retVal;
    }
    //@Override
    public android.view.View onCreatePanelView(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onCreatePanelView", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onCreatePanelView(arg0); else retVal = eventDataExchange.getReturnData(); return (android.view.View)retVal;
    }
    //@Override
    public android.view.View onCreateView(android.view.View arg0, java.lang.String arg1, android.content.Context arg2, android.util.AttributeSet arg3) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onCreateView", eventDataExchange, arg0, arg1, arg2, arg3); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onCreateView(arg0, arg1, arg2, arg3); else retVal = eventDataExchange.getReturnData(); return (android.view.View)retVal;
    }
    //@Override
    public android.view.View onCreateView(java.lang.String arg0, android.content.Context arg1, android.util.AttributeSet arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onCreateView3", eventDataExchange, arg0, arg1, arg2); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onCreateView(arg0, arg1, arg2); else retVal = eventDataExchange.getReturnData(); return (android.view.View)retVal;
    }
    //@Override
    public android.view.Window getWindow() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getWindow", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getWindow(); else retVal = eventDataExchange.getReturnData(); return (android.view.Window)retVal;
    }
    //@Override
    public android.view.WindowManager getWindowManager() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getWindowManager", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getWindowManager(); else retVal = eventDataExchange.getReturnData(); return (android.view.WindowManager)retVal;
    }
    //@Override
    public android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getOnBackInvokedDispatcher", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getOnBackInvokedDispatcher(); else retVal = eventDataExchange.getReturnData(); return (android.window.OnBackInvokedDispatcher)retVal;
    }
    //@Override
    public boolean dispatchGenericMotionEvent(android.view.MotionEvent arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("dispatchGenericMotionEvent", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.dispatchGenericMotionEvent(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean dispatchKeyShortcutEvent(android.view.KeyEvent arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("dispatchKeyShortcutEvent", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.dispatchKeyShortcutEvent(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("dispatchPopulateAccessibilityEvent", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.dispatchPopulateAccessibilityEvent(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean dispatchTouchEvent(android.view.MotionEvent arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("dispatchTouchEvent", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.dispatchTouchEvent(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean enterPictureInPictureMode(android.app.PictureInPictureParams arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("enterPictureInPictureMode", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.enterPictureInPictureMode(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean hasWindowFocus() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("hasWindowFocus", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.hasWindowFocus(); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean isActivityTransitionRunning() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("isActivityTransitionRunning", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.isActivityTransitionRunning(); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean isChangingConfigurations() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("isChangingConfigurations", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.isChangingConfigurations(); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean isDestroyed() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("isDestroyed", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.isDestroyed(); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean isInMultiWindowMode() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("isInMultiWindowMode", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.isInMultiWindowMode(); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean isInPictureInPictureMode() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("isInPictureInPictureMode", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.isInPictureInPictureMode(); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean isLaunchedFromBubble() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("isLaunchedFromBubble", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.isLaunchedFromBubble(); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean isLocalVoiceInteractionSupported() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("isLocalVoiceInteractionSupported", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.isLocalVoiceInteractionSupported(); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean isTaskRoot() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("isTaskRoot", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.isTaskRoot(); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean isVoiceInteraction() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("isVoiceInteraction", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.isVoiceInteraction(); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean isVoiceInteractionRoot() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("isVoiceInteractionRoot", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.isVoiceInteractionRoot(); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean moveTaskToBack(boolean arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("moveTaskToBack", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.moveTaskToBack(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean navigateUpTo(android.content.Intent arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("navigateUpTo", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.navigateUpTo(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean navigateUpToFromChild(android.app.Activity arg0, android.content.Intent arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("navigateUpToFromChild", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.navigateUpToFromChild(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onContextItemSelected(android.view.MenuItem arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onContextItemSelected", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onContextItemSelected(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onCreateOptionsMenu(android.view.Menu arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onCreateOptionsMenu", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onCreateOptionsMenu(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onCreatePanelMenu(int arg0, android.view.Menu arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onCreatePanelMenu", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onCreatePanelMenu(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onCreateThumbnail(android.graphics.Bitmap arg0, android.graphics.Canvas arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onCreateThumbnail", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onCreateThumbnail(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onGenericMotionEvent(android.view.MotionEvent arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onGenericMotionEvent", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onGenericMotionEvent(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onKeyDown(int arg0, android.view.KeyEvent arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onKeyDown", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onKeyDown(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onKeyLongPress(int arg0, android.view.KeyEvent arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onKeyLongPress", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onKeyLongPress(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onKeyMultiple(int arg0, int arg1, android.view.KeyEvent arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onKeyMultiple", eventDataExchange, arg0, arg1, arg2); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onKeyMultiple(arg0, arg1, arg2); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onKeyShortcut(int arg0, android.view.KeyEvent arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onKeyShortcut", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onKeyShortcut(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onKeyUp(int arg0, android.view.KeyEvent arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onKeyUp", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onKeyUp(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onMenuItemSelected(int arg0, android.view.MenuItem arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onMenuItemSelected", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onMenuItemSelected(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onMenuOpened(int arg0, android.view.Menu arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onMenuOpened", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onMenuOpened(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onNavigateUp() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onNavigateUp", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onNavigateUp(); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onNavigateUpFromChild(android.app.Activity arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onNavigateUpFromChild", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onNavigateUpFromChild(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onOptionsItemSelected(android.view.MenuItem arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onOptionsItemSelected", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onOptionsItemSelected(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onPictureInPictureRequested() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onPictureInPictureRequested", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onPictureInPictureRequested(); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onPrepareOptionsMenu(android.view.Menu arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onPrepareOptionsMenu", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onPrepareOptionsMenu(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onPreparePanel(int arg0, android.view.View arg1, android.view.Menu arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onPreparePanel", eventDataExchange, arg0, arg1, arg2); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onPreparePanel(arg0, arg1, arg2); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onSearchRequested() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onSearchRequested", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onSearchRequested(); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onSearchRequested(android.view.SearchEvent arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onSearchRequested1", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onSearchRequested(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onTouchEvent(android.view.MotionEvent arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onTouchEvent", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onTouchEvent(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onTrackballEvent(android.view.MotionEvent arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onTrackballEvent", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onTrackballEvent(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean shouldDockBigOverlays() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("shouldDockBigOverlays", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.shouldDockBigOverlays(); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean shouldShowRequestPermissionRationale(java.lang.String arg0, int arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("shouldShowRequestPermissionRationale", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.shouldShowRequestPermissionRationale(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean shouldShowRequestPermissionRationale(java.lang.String arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("shouldShowRequestPermissionRationale1", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.shouldShowRequestPermissionRationale(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean shouldUpRecreateTask(android.content.Intent arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("shouldUpRecreateTask", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.shouldUpRecreateTask(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean showAssist(android.os.Bundle arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("showAssist", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.showAssist(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean onChildClick(android.widget.ExpandableListView arg0, android.view.View arg1, int arg2, int arg3, long arg4) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onChildClick", eventDataExchange, arg0, arg1, arg2, arg3, arg4); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onChildClick(arg0, arg1, arg2, arg3, arg4); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean bindIsolatedService(android.content.Intent arg0, android.content.Context.BindServiceFlags arg1, java.lang.String arg2, java.util.concurrent.Executor arg3, android.content.ServiceConnection arg4) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("bindIsolatedService", eventDataExchange, arg0, arg1, arg2, arg3, arg4); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.bindIsolatedService(arg0, arg1, arg2, arg3, arg4); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean bindIsolatedService(android.content.Intent arg0, int arg1, java.lang.String arg2, java.util.concurrent.Executor arg3, android.content.ServiceConnection arg4) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("bindIsolatedService5", eventDataExchange, arg0, arg1, arg2, arg3, arg4); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.bindIsolatedService(arg0, arg1, arg2, arg3, arg4); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean isDeviceProtectedStorage() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("isDeviceProtectedStorage", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.isDeviceProtectedStorage(); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean isUiContext() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("isUiContext", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.isUiContext(); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean moveDatabaseFrom(android.content.Context arg0, java.lang.String arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("moveDatabaseFrom", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.moveDatabaseFrom(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean moveSharedPreferencesFrom(android.content.Context arg0, java.lang.String arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("moveSharedPreferencesFrom", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.moveSharedPreferencesFrom(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean startInstrumentation(android.content.ComponentName arg0, java.lang.String arg1, android.os.Bundle arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("startInstrumentation", eventDataExchange, arg0, arg1, arg2); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.startInstrumentation(arg0, arg1, arg2); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean stopService(android.content.Intent arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("stopService", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.stopService(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public void onPointerCaptureChanged(boolean arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onPointerCaptureChanged", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) android.app.ExpandableListActivity.super.onPointerCaptureChanged(arg0);
    }
    //@Override
    public void onPointerCaptureChangedDefault(boolean arg0) {
        android.app.ExpandableListActivity.super.onPointerCaptureChanged(arg0);
    }
    //@Override
    public android.app.Application getApplication() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getApplication", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getApplication(); else retVal = eventDataExchange.getReturnData(); return (android.app.Application)retVal;
    }
    //@Override
    public android.content.res.ColorStateList getColorStateList(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getColorStateList", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getColorStateList(arg0); else retVal = eventDataExchange.getReturnData(); return (android.content.res.ColorStateList)retVal;
    }
    //@Override
    public android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet arg0, int[] arg1, int arg2, int arg3) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("obtainStyledAttributes", eventDataExchange, arg0, arg1, arg2, arg3); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.obtainStyledAttributes(arg0, arg1, arg2, arg3); else retVal = eventDataExchange.getReturnData(); return (android.content.res.TypedArray)retVal;
    }
    //@Override
    public android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet arg0, int[] arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("obtainStyledAttributes2", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.obtainStyledAttributes(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (android.content.res.TypedArray)retVal;
    }
    //@Override
    public android.content.res.TypedArray obtainStyledAttributes(int arg0, int[] arg1) throws android.content.res.Resources$NotFoundException {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("obtainStyledAttributes2_2", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.obtainStyledAttributes(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (android.content.res.TypedArray)retVal;
    }
    //@Override
    public android.content.res.TypedArray obtainStyledAttributes(int[] arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("obtainStyledAttributes1_3", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.obtainStyledAttributes(arg0); else retVal = eventDataExchange.getReturnData(); return (android.content.res.TypedArray)retVal;
    }
    //@Override
    public android.media.session.MediaController getMediaController() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getMediaController", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getMediaController(); else retVal = eventDataExchange.getReturnData(); return (android.media.session.MediaController)retVal;
    }
    //@Override
    public boolean requestWindowFeature(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("requestWindowFeature", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.requestWindowFeature(arg0); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public boolean showDialog(int arg0, android.os.Bundle arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("showDialog", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.showDialog(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (boolean)retVal;
    }
    //@Override
    public int getTitleColor() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getTitleColor", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getTitleColor(); else retVal = eventDataExchange.getReturnData(); return (int)retVal;
    }
    //@Override
    public int getVolumeControlStream() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getVolumeControlStream", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getVolumeControlStream(); else retVal = eventDataExchange.getReturnData(); return (int)retVal;
    }
    //@Override
    public int getColor(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getColor", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getColor(arg0); else retVal = eventDataExchange.getReturnData(); return (int)retVal;
    }
    //@Override
    public void dismissDialog(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("dismissDialog", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.dismissDialog(arg0);
    }
    //@Override
    public void dismissKeyboardShortcutsHelper() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("dismissKeyboardShortcutsHelper", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.dismissKeyboardShortcutsHelper();
    }
    //@Override
    public void removeDialog(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("removeDialog", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.removeDialog(arg0);
    }
    //@Override
    public void requestPermissions(java.lang.String[] arg0, int arg1, int arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("requestPermissions", eventDataExchange, arg0, arg1, arg2); if (!eventDataExchange.getHasOverride()) super.requestPermissions(arg0, arg1, arg2);
    }
    //@Override
    public void requestPermissions(java.lang.String[] arg0, int arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("requestPermissions2", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.requestPermissions(arg0, arg1);
    }
    //@Override
    public void requestShowKeyboardShortcuts() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("requestShowKeyboardShortcuts", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.requestShowKeyboardShortcuts();
    }
    //@Override
    public void setDefaultKeyMode(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setDefaultKeyMode", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setDefaultKeyMode(arg0);
    }
    //@Override
    public void setFeatureDrawableResource(int arg0, int arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setFeatureDrawableResource", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.setFeatureDrawableResource(arg0, arg1);
    }
    //@Override
    public void setMediaController(android.media.session.MediaController arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setMediaController", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setMediaController(arg0);
    }
    //@Override
    public void setProgress(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setProgress", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setProgress(arg0);
    }
    //@Override
    public void setProgressBarIndeterminate(boolean arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setProgressBarIndeterminate", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setProgressBarIndeterminate(arg0);
    }
    //@Override
    public void setProgressBarIndeterminateVisibility(boolean arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setProgressBarIndeterminateVisibility", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setProgressBarIndeterminateVisibility(arg0);
    }
    //@Override
    public void setProgressBarVisibility(boolean arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setProgressBarVisibility", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setProgressBarVisibility(arg0);
    }
    //@Override
    public void setSecondaryProgress(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setSecondaryProgress", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setSecondaryProgress(arg0);
    }
    //@Override
    public void setVolumeControlStream(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setVolumeControlStream", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setVolumeControlStream(arg0);
    }
    //@Override
    public void showDialog(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("showDialog1", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.showDialog(arg0);
    }
    //@Override
    public int getChangingConfigurations() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getChangingConfigurations", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getChangingConfigurations(); else retVal = eventDataExchange.getReturnData(); return (int)retVal;
    }
    //@Override
    public int getLaunchedFromUid() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getLaunchedFromUid", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getLaunchedFromUid(); else retVal = eventDataExchange.getReturnData(); return (int)retVal;
    }
    //@Override
    public int getMaxNumPictureInPictureActions() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getMaxNumPictureInPictureActions", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getMaxNumPictureInPictureActions(); else retVal = eventDataExchange.getReturnData(); return (int)retVal;
    }
    //@Override
    public int getRequestedOrientation() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getRequestedOrientation", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getRequestedOrientation(); else retVal = eventDataExchange.getReturnData(); return (int)retVal;
    }
    //@Override
    public int checkCallingOrSelfPermission(java.lang.String arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("checkCallingOrSelfPermission", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.checkCallingOrSelfPermission(arg0); else retVal = eventDataExchange.getReturnData(); return (int)retVal;
    }
    //@Override
    public int checkCallingOrSelfUriPermission(android.net.Uri arg0, int arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("checkCallingOrSelfUriPermission", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.checkCallingOrSelfUriPermission(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (int)retVal;
    }
    //@Override
    public int checkCallingPermission(java.lang.String arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("checkCallingPermission", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.checkCallingPermission(arg0); else retVal = eventDataExchange.getReturnData(); return (int)retVal;
    }
    //@Override
    public int checkCallingUriPermission(android.net.Uri arg0, int arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("checkCallingUriPermission", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.checkCallingUriPermission(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (int)retVal;
    }
    //@Override
    public int checkContentUriPermissionFull(android.net.Uri arg0, int arg1, int arg2, int arg3) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("checkContentUriPermissionFull", eventDataExchange, arg0, arg1, arg2, arg3); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.checkContentUriPermissionFull(arg0, arg1, arg2, arg3); else retVal = eventDataExchange.getReturnData(); return (int)retVal;
    }
    //@Override
    public int checkPermission(java.lang.String arg0, int arg1, int arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("checkPermission", eventDataExchange, arg0, arg1, arg2); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.checkPermission(arg0, arg1, arg2); else retVal = eventDataExchange.getReturnData(); return (int)retVal;
    }
    //@Override
    public int checkSelfPermission(java.lang.String arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("checkSelfPermission", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.checkSelfPermission(arg0); else retVal = eventDataExchange.getReturnData(); return (int)retVal;
    }
    //@Override
    public int checkUriPermission(android.net.Uri arg0, int arg1, int arg2, int arg3) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("checkUriPermission", eventDataExchange, arg0, arg1, arg2, arg3); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.checkUriPermission(arg0, arg1, arg2, arg3); else retVal = eventDataExchange.getReturnData(); return (int)retVal;
    }
    //@Override
    public int checkUriPermission(android.net.Uri arg0, java.lang.String arg1, java.lang.String arg2, int arg3, int arg4, int arg5) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("checkUriPermission6", eventDataExchange, arg0, arg1, arg2, arg3, arg4, arg5); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.checkUriPermission(arg0, arg1, arg2, arg3, arg4, arg5); else retVal = eventDataExchange.getReturnData(); return (int)retVal;
    }
    //@Override
    public int[] checkCallingOrSelfUriPermissions(java.util.List arg0, int arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("checkCallingOrSelfUriPermissions", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.checkCallingOrSelfUriPermissions(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (int[])retVal;
    }
    //@Override
    public int[] checkCallingUriPermissions(java.util.List arg0, int arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("checkCallingUriPermissions", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.checkCallingUriPermissions(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (int[])retVal;
    }
    //@Override
    public int[] checkUriPermissions(java.util.List arg0, int arg1, int arg2, int arg3) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("checkUriPermissions", eventDataExchange, arg0, arg1, arg2, arg3); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.checkUriPermissions(arg0, arg1, arg2, arg3); else retVal = eventDataExchange.getReturnData(); return (int[])retVal;
    }
    //@Override
    public java.io.File getCodeCacheDir() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getCodeCacheDir", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getCodeCacheDir(); else retVal = eventDataExchange.getReturnData(); return (java.io.File)retVal;
    }
    //@Override
    public java.io.File getNoBackupFilesDir() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getNoBackupFilesDir", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getNoBackupFilesDir(); else retVal = eventDataExchange.getReturnData(); return (java.io.File)retVal;
    }
    //@Override
    public java.io.FileInputStream openFileInput(java.lang.String arg0) throws java.io.FileNotFoundException {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("openFileInput", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.openFileInput(arg0); else retVal = eventDataExchange.getReturnData(); return (java.io.FileInputStream)retVal;
    }
    //@Override
    public java.io.FileOutputStream openFileOutput(java.lang.String arg0, int arg1) throws java.io.FileNotFoundException {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("openFileOutput", eventDataExchange, arg0, arg1); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.openFileOutput(arg0, arg1); else retVal = eventDataExchange.getReturnData(); return (java.io.FileOutputStream)retVal;
    }
    //@Override
    public java.lang.CharSequence onCreateDescription() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onCreateDescription", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onCreateDescription(); else retVal = eventDataExchange.getReturnData(); return (java.lang.CharSequence)retVal;
    }
    //@Override
    public java.lang.ClassLoader getClassLoader() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getClassLoader", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getClassLoader(); else retVal = eventDataExchange.getReturnData(); return (java.lang.ClassLoader)retVal;
    }
    //@Override
    public java.lang.Object getLastNonConfigurationInstance() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getLastNonConfigurationInstance", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getLastNonConfigurationInstance(); else retVal = eventDataExchange.getReturnData(); return (java.lang.Object)retVal;
    }
    //@Override
    public java.lang.Object onRetainNonConfigurationInstance() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onRetainNonConfigurationInstance", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.onRetainNonConfigurationInstance(); else retVal = eventDataExchange.getReturnData(); return (java.lang.Object)retVal;
    }
    //@Override
    public java.lang.String getLaunchedFromPackage() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getLaunchedFromPackage", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getLaunchedFromPackage(); else retVal = eventDataExchange.getReturnData(); return (java.lang.String)retVal;
    }
    //@Override
    public java.lang.String getLocalClassName() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getLocalClassName", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getLocalClassName(); else retVal = eventDataExchange.getReturnData(); return (java.lang.String)retVal;
    }
    //@Override
    public java.lang.String getAttributionTag() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getAttributionTag", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getAttributionTag(); else retVal = eventDataExchange.getReturnData(); return (java.lang.String)retVal;
    }
    //@Override
    public java.lang.String getPackageCodePath() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getPackageCodePath", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getPackageCodePath(); else retVal = eventDataExchange.getReturnData(); return (java.lang.String)retVal;
    }
    //@Override
    public java.lang.String getPackageResourcePath() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getPackageResourcePath", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getPackageResourcePath(); else retVal = eventDataExchange.getReturnData(); return (java.lang.String)retVal;
    }
    //@Override
    public java.util.concurrent.Executor getMainExecutor() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getMainExecutor", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getMainExecutor(); else retVal = eventDataExchange.getReturnData(); return (java.util.concurrent.Executor)retVal;
    }
    //@Override
    public long getSelectedPosition() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getSelectedPosition", eventDataExchange); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = super.getSelectedPosition(); else retVal = eventDataExchange.getReturnData(); return (long)retVal;
    }
    //@Override
    public void addContentView(android.view.View arg0, android.view.ViewGroup.LayoutParams arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("addContentView", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.addContentView(arg0, arg1);
    }
    //@Override
    public void clearOverrideActivityTransition(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("clearOverrideActivityTransition", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.clearOverrideActivityTransition(arg0);
    }
    //@Override
    public void closeContextMenu() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("closeContextMenu", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.closeContextMenu();
    }
    //@Override
    public void closeOptionsMenu() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("closeOptionsMenu", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.closeOptionsMenu();
    }
    //@Override
    public void enterPictureInPictureMode() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("enterPictureInPictureMode0", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.enterPictureInPictureMode();
    }
    //@Override
    public void finishActivityFromChild(android.app.Activity arg0, int arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("finishActivityFromChild", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.finishActivityFromChild(arg0, arg1);
    }
    //@Override
    public void finishAfterTransition() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("finishAfterTransition", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.finishAfterTransition();
    }
    //@Override
    public void finishAndRemoveTask() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("finishAndRemoveTask", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.finishAndRemoveTask();
    }
    //@Override
    public void finishFromChild(android.app.Activity arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("finishFromChild", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.finishFromChild(arg0);
    }
    //@Override
    public void invalidateOptionsMenu() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("invalidateOptionsMenu", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.invalidateOptionsMenu();
    }
    //@Override
    public void onActionModeFinished(android.view.ActionMode arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onActionModeFinished", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.onActionModeFinished(arg0);
    }
    //@Override
    public void onActionModeStarted(android.view.ActionMode arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onActionModeStarted", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.onActionModeStarted(arg0);
    }
    //@Override
    public void onActivityReenter(int arg0, android.content.Intent arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onActivityReenter", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.onActivityReenter(arg0, arg1);
    }
    //@Override
    public void onActivityResult(int arg0, int arg1, android.content.Intent arg2, android.app.ComponentCaller arg3) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onActivityResult", eventDataExchange, arg0, arg1, arg2, arg3); if (!eventDataExchange.getHasOverride()) super.onActivityResult(arg0, arg1, arg2, arg3);
    }
    //@Override
    public void onAttachedToWindow() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onAttachedToWindow", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.onAttachedToWindow();
    }
    //@Override
    public void onAttachFragment(android.app.Fragment arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onAttachFragment", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.onAttachFragment(arg0);
    }
    //@Override
    public void onBackPressed() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onBackPressed", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.onBackPressed();
    }
    //@Override
    public void onConfigurationChanged(android.content.res.Configuration arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onConfigurationChanged", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.onConfigurationChanged(arg0);
    }
    //@Override
    public void onContextMenuClosed(android.view.Menu arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onContextMenuClosed", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.onContextMenuClosed(arg0);
    }
    //@Override
    public void onCreate(android.os.Bundle arg0, android.os.PersistableBundle arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onCreate", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.onCreate(arg0, arg1);
    }
    //@Override
    public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onCreateNavigateUpTaskStack", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.onCreateNavigateUpTaskStack(arg0);
    }
    //@Override
    public void onDetachedFromWindow() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onDetachedFromWindow", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.onDetachedFromWindow();
    }
    //@Override
    public void onEnterAnimationComplete() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onEnterAnimationComplete", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.onEnterAnimationComplete();
    }
    //@Override
    public void onGetDirectActions(android.os.CancellationSignal arg0, java.util.function.Consumer arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onGetDirectActions", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.onGetDirectActions(arg0, arg1);
    }
    //@Override
    public void onLocalVoiceInteractionStarted() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onLocalVoiceInteractionStarted", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.onLocalVoiceInteractionStarted();
    }
    //@Override
    public void onLocalVoiceInteractionStopped() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onLocalVoiceInteractionStopped", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.onLocalVoiceInteractionStopped();
    }
    //@Override
    public void onLowMemory() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onLowMemory", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.onLowMemory();
    }
    //@Override
    public void onMultiWindowModeChanged(boolean arg0, android.content.res.Configuration arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onMultiWindowModeChanged", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.onMultiWindowModeChanged(arg0, arg1);
    }
    //@Override
    public void onMultiWindowModeChanged(boolean arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onMultiWindowModeChanged1", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.onMultiWindowModeChanged(arg0);
    }
    //@Override
    public void onNewIntent(android.content.Intent arg0, android.app.ComponentCaller arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onNewIntent", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.onNewIntent(arg0, arg1);
    }
    //@Override
    public void onOptionsMenuClosed(android.view.Menu arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onOptionsMenuClosed", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.onOptionsMenuClosed(arg0);
    }
    //@Override
    public void onPanelClosed(int arg0, android.view.Menu arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onPanelClosed", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.onPanelClosed(arg0, arg1);
    }
    //@Override
    public void onPerformDirectAction(java.lang.String arg0, android.os.Bundle arg1, android.os.CancellationSignal arg2, java.util.function.Consumer arg3) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onPerformDirectAction", eventDataExchange, arg0, arg1, arg2, arg3); if (!eventDataExchange.getHasOverride()) super.onPerformDirectAction(arg0, arg1, arg2, arg3);
    }
    //@Override
    public void onPictureInPictureModeChanged(boolean arg0, android.content.res.Configuration arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onPictureInPictureModeChanged", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.onPictureInPictureModeChanged(arg0, arg1);
    }
    //@Override
    public void onPictureInPictureModeChanged(boolean arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onPictureInPictureModeChanged1", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.onPictureInPictureModeChanged(arg0);
    }
    //@Override
    public void onPictureInPictureUiStateChanged(android.app.PictureInPictureUiState arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onPictureInPictureUiStateChanged", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.onPictureInPictureUiStateChanged(arg0);
    }
    //@Override
    public void onPostCreate(android.os.Bundle arg0, android.os.PersistableBundle arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onPostCreate", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.onPostCreate(arg0, arg1);
    }
    //@Override
    public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onPrepareNavigateUpTaskStack", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.onPrepareNavigateUpTaskStack(arg0);
    }
    //@Override
    public void onProvideAssistContent(android.app.assist.AssistContent arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onProvideAssistContent", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.onProvideAssistContent(arg0);
    }
    //@Override
    public void onProvideAssistData(android.os.Bundle arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onProvideAssistData", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.onProvideAssistData(arg0);
    }
    //@Override
    public void onProvideKeyboardShortcuts(java.util.List arg0, android.view.Menu arg1, int arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onProvideKeyboardShortcuts", eventDataExchange, arg0, arg1, arg2); if (!eventDataExchange.getHasOverride()) super.onProvideKeyboardShortcuts(arg0, arg1, arg2);
    }
    //@Override
    public void onRequestPermissionsResult(int arg0, java.lang.String[] arg1, int[] arg2, int arg3) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onRequestPermissionsResult", eventDataExchange, arg0, arg1, arg2, arg3); if (!eventDataExchange.getHasOverride()) super.onRequestPermissionsResult(arg0, arg1, arg2, arg3);
    }
    //@Override
    public void onRequestPermissionsResult(int arg0, java.lang.String[] arg1, int[] arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onRequestPermissionsResult3", eventDataExchange, arg0, arg1, arg2); if (!eventDataExchange.getHasOverride()) super.onRequestPermissionsResult(arg0, arg1, arg2);
    }
    //@Override
    public void onRestoreInstanceState(android.os.Bundle arg0, android.os.PersistableBundle arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onRestoreInstanceState", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.onRestoreInstanceState(arg0, arg1);
    }
    //@Override
    public void onSaveInstanceState(android.os.Bundle arg0, android.os.PersistableBundle arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onSaveInstanceState", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.onSaveInstanceState(arg0, arg1);
    }
    //@Override
    public void onStateNotSaved() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onStateNotSaved", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.onStateNotSaved();
    }
    //@Override
    public void onTopResumedActivityChanged(boolean arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onTopResumedActivityChanged", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.onTopResumedActivityChanged(arg0);
    }
    //@Override
    public void onTrimMemory(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onTrimMemory", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.onTrimMemory(arg0);
    }
    //@Override
    public void onUserInteraction() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onUserInteraction", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.onUserInteraction();
    }
    //@Override
    public void onVisibleBehindCanceled() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onVisibleBehindCanceled", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.onVisibleBehindCanceled();
    }
    //@Override
    public void onWindowAttributesChanged(android.view.WindowManager.LayoutParams arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onWindowAttributesChanged", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.onWindowAttributesChanged(arg0);
    }
    //@Override
    public void onWindowFocusChanged(boolean arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onWindowFocusChanged", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.onWindowFocusChanged(arg0);
    }
    //@Override
    public void openContextMenu(android.view.View arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("openContextMenu", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.openContextMenu(arg0);
    }
    //@Override
    public void openOptionsMenu() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("openOptionsMenu", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.openOptionsMenu();
    }
    //@Override
    public void overrideActivityTransition(int arg0, int arg1, int arg2, int arg3) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("overrideActivityTransition", eventDataExchange, arg0, arg1, arg2, arg3); if (!eventDataExchange.getHasOverride()) super.overrideActivityTransition(arg0, arg1, arg2, arg3);
    }
    //@Override
    public void overrideActivityTransition(int arg0, int arg1, int arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("overrideActivityTransition3", eventDataExchange, arg0, arg1, arg2); if (!eventDataExchange.getHasOverride()) super.overrideActivityTransition(arg0, arg1, arg2);
    }
    //@Override
    public void overridePendingTransition(int arg0, int arg1, int arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("overridePendingTransition", eventDataExchange, arg0, arg1, arg2); if (!eventDataExchange.getHasOverride()) super.overridePendingTransition(arg0, arg1, arg2);
    }
    //@Override
    public void overridePendingTransition(int arg0, int arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("overridePendingTransition2", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.overridePendingTransition(arg0, arg1);
    }
    //@Override
    public void postponeEnterTransition() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("postponeEnterTransition", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.postponeEnterTransition();
    }
    //@Override
    public void registerComponentCallbacks(android.content.ComponentCallbacks arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("registerComponentCallbacks", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.registerComponentCallbacks(arg0);
    }
    //@Override
    public void registerForContextMenu(android.view.View arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("registerForContextMenu", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.registerForContextMenu(arg0);
    }
    //@Override
    public void reportFullyDrawn() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("reportFullyDrawn", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.reportFullyDrawn();
    }
    //@Override
    public void requestFullscreenMode(int arg0, android.os.OutcomeReceiver arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("requestFullscreenMode", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.requestFullscreenMode(arg0, arg1);
    }
    //@Override
    public void setActionBar(android.widget.Toolbar arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setActionBar", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setActionBar(arg0);
    }
    //@Override
    public void setAllowCrossUidActivitySwitchFromBelow(boolean arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setAllowCrossUidActivitySwitchFromBelow", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setAllowCrossUidActivitySwitchFromBelow(arg0);
    }
    //@Override
    public void setContentTransitionManager(android.transition.TransitionManager arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setContentTransitionManager", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setContentTransitionManager(arg0);
    }
    //@Override
    public void setContentView(android.view.View arg0, android.view.ViewGroup.LayoutParams arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setContentView", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.setContentView(arg0, arg1);
    }
    //@Override
    public void setContentView(android.view.View arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setContentView1", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setContentView(arg0);
    }
    //@Override
    public void setContentView(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setContentView1_2", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setContentView(arg0);
    }
    //@Override
    public void setFinishOnTouchOutside(boolean arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setFinishOnTouchOutside", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setFinishOnTouchOutside(arg0);
    }
    //@Override
    public void setInheritShowWhenLocked(boolean arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setInheritShowWhenLocked", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setInheritShowWhenLocked(arg0);
    }
    //@Override
    public void setLocusContext(android.content.LocusId arg0, android.os.Bundle arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setLocusContext", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.setLocusContext(arg0, arg1);
    }
    //@Override
    public void setRecentsScreenshotEnabled(boolean arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setRecentsScreenshotEnabled", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setRecentsScreenshotEnabled(arg0);
    }
    //@Override
    public void setRequestedOrientation(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setRequestedOrientation", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setRequestedOrientation(arg0);
    }
    //@Override
    public void setShouldDockBigOverlays(boolean arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setShouldDockBigOverlays", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setShouldDockBigOverlays(arg0);
    }
    //@Override
    public void setShowWhenLocked(boolean arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setShowWhenLocked", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setShowWhenLocked(arg0);
    }
    //@Override
    public void setTaskDescription(android.app.ActivityManager.TaskDescription arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setTaskDescription", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setTaskDescription(arg0);
    }
    //@Override
    public void setTitleColor(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setTitleColor", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setTitleColor(arg0);
    }
    //@Override
    public void setVrModeEnabled(boolean arg0, android.content.ComponentName arg1) throws android.content.pm.PackageManager$NameNotFoundException {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setVrModeEnabled", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.setVrModeEnabled(arg0, arg1);
    }
    //@Override
    public void showLockTaskEscapeMessage() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("showLockTaskEscapeMessage", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.showLockTaskEscapeMessage();
    }
    //@Override
    public void startActivityForResult(android.content.Intent arg0, int arg1, android.os.Bundle arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("startActivityForResult", eventDataExchange, arg0, arg1, arg2); if (!eventDataExchange.getHasOverride()) super.startActivityForResult(arg0, arg1, arg2);
    }
    //@Override
    public void startActivityForResult(android.content.Intent arg0, int arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("startActivityForResult2", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.startActivityForResult(arg0, arg1);
    }
    //@Override
    public void startActivityFromChild(android.app.Activity arg0, android.content.Intent arg1, int arg2, android.os.Bundle arg3) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("startActivityFromChild", eventDataExchange, arg0, arg1, arg2, arg3); if (!eventDataExchange.getHasOverride()) super.startActivityFromChild(arg0, arg1, arg2, arg3);
    }
    //@Override
    public void startActivityFromChild(android.app.Activity arg0, android.content.Intent arg1, int arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("startActivityFromChild3", eventDataExchange, arg0, arg1, arg2); if (!eventDataExchange.getHasOverride()) super.startActivityFromChild(arg0, arg1, arg2);
    }
    //@Override
    public void startActivityFromFragment(android.app.Fragment arg0, android.content.Intent arg1, int arg2, android.os.Bundle arg3) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("startActivityFromFragment", eventDataExchange, arg0, arg1, arg2, arg3); if (!eventDataExchange.getHasOverride()) super.startActivityFromFragment(arg0, arg1, arg2, arg3);
    }
    //@Override
    public void startActivityFromFragment(android.app.Fragment arg0, android.content.Intent arg1, int arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("startActivityFromFragment3", eventDataExchange, arg0, arg1, arg2); if (!eventDataExchange.getHasOverride()) super.startActivityFromFragment(arg0, arg1, arg2);
    }
    //@Override
    public void startIntentSenderForResult(android.content.IntentSender arg0, int arg1, android.content.Intent arg2, int arg3, int arg4, int arg5, android.os.Bundle arg6) throws android.content.IntentSender$SendIntentException {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("startIntentSenderForResult", eventDataExchange, arg0, arg1, arg2, arg3, arg4, arg5, arg6); if (!eventDataExchange.getHasOverride()) super.startIntentSenderForResult(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    //@Override
    public void startIntentSenderForResult(android.content.IntentSender arg0, int arg1, android.content.Intent arg2, int arg3, int arg4, int arg5) throws android.content.IntentSender$SendIntentException {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("startIntentSenderForResult6", eventDataExchange, arg0, arg1, arg2, arg3, arg4, arg5); if (!eventDataExchange.getHasOverride()) super.startIntentSenderForResult(arg0, arg1, arg2, arg3, arg4, arg5);
    }
    //@Override
    public void startIntentSenderFromChild(android.app.Activity arg0, android.content.IntentSender arg1, int arg2, android.content.Intent arg3, int arg4, int arg5, int arg6, android.os.Bundle arg7) throws android.content.IntentSender$SendIntentException {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("startIntentSenderFromChild", eventDataExchange, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); if (!eventDataExchange.getHasOverride()) super.startIntentSenderFromChild(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    }
    //@Override
    public void startIntentSenderFromChild(android.app.Activity arg0, android.content.IntentSender arg1, int arg2, android.content.Intent arg3, int arg4, int arg5, int arg6) throws android.content.IntentSender$SendIntentException {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("startIntentSenderFromChild7", eventDataExchange, arg0, arg1, arg2, arg3, arg4, arg5, arg6); if (!eventDataExchange.getHasOverride()) super.startIntentSenderFromChild(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    //@Override
    public void startLocalVoiceInteraction(android.os.Bundle arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("startLocalVoiceInteraction", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.startLocalVoiceInteraction(arg0);
    }
    //@Override
    public void startLockTask() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("startLockTask", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.startLockTask();
    }
    //@Override
    public void startManagingCursor(android.database.Cursor arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("startManagingCursor", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.startManagingCursor(arg0);
    }
    //@Override
    public void startPostponedEnterTransition() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("startPostponedEnterTransition", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.startPostponedEnterTransition();
    }
    //@Override
    public void stopLocalVoiceInteraction() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("stopLocalVoiceInteraction", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.stopLocalVoiceInteraction();
    }
    //@Override
    public void stopLockTask() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("stopLockTask", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.stopLockTask();
    }
    //@Override
    public void stopManagingCursor(android.database.Cursor arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("stopManagingCursor", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.stopManagingCursor(arg0);
    }
    //@Override
    public void unregisterComponentCallbacks(android.content.ComponentCallbacks arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("unregisterComponentCallbacks", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.unregisterComponentCallbacks(arg0);
    }
    //@Override
    public void unregisterForContextMenu(android.view.View arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("unregisterForContextMenu", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.unregisterForContextMenu(arg0);
    }
    //@Override
    public void onContentChanged() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onContentChanged", eventDataExchange); if (!eventDataExchange.getHasOverride()) super.onContentChanged();
    }
    //@Override
    public void onCreateContextMenu(android.view.ContextMenu arg0, android.view.View arg1, android.view.ContextMenu.ContextMenuInfo arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onCreateContextMenu", eventDataExchange, arg0, arg1, arg2); if (!eventDataExchange.getHasOverride()) super.onCreateContextMenu(arg0, arg1, arg2);
    }
    //@Override
    public void onGroupCollapse(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onGroupCollapse", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.onGroupCollapse(arg0);
    }
    //@Override
    public void onGroupExpand(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("onGroupExpand", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.onGroupExpand(arg0);
    }
    //@Override
    public void setSelectedGroup(int arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("setSelectedGroup", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.setSelectedGroup(arg0);
    }
    //@Override
    public void revokeSelfPermissionOnKill(java.lang.String arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("revokeSelfPermissionOnKill", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.revokeSelfPermissionOnKill(arg0);
    }
    //@Override
    public void sendBroadcastWithMultiplePermissions(android.content.Intent arg0, java.lang.String[] arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("sendBroadcastWithMultiplePermissions", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.sendBroadcastWithMultiplePermissions(arg0, arg1);
    }
    //@Override
    public void enforceCallingOrSelfPermission(java.lang.String arg0, java.lang.String arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("enforceCallingOrSelfPermission", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.enforceCallingOrSelfPermission(arg0, arg1);
    }
    //@Override
    public void enforceCallingOrSelfUriPermission(android.net.Uri arg0, int arg1, java.lang.String arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("enforceCallingOrSelfUriPermission", eventDataExchange, arg0, arg1, arg2); if (!eventDataExchange.getHasOverride()) super.enforceCallingOrSelfUriPermission(arg0, arg1, arg2);
    }
    //@Override
    public void enforceCallingPermission(java.lang.String arg0, java.lang.String arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("enforceCallingPermission", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.enforceCallingPermission(arg0, arg1);
    }
    //@Override
    public void enforceCallingUriPermission(android.net.Uri arg0, int arg1, java.lang.String arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("enforceCallingUriPermission", eventDataExchange, arg0, arg1, arg2); if (!eventDataExchange.getHasOverride()) super.enforceCallingUriPermission(arg0, arg1, arg2);
    }
    //@Override
    public void enforcePermission(java.lang.String arg0, int arg1, int arg2, java.lang.String arg3) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("enforcePermission", eventDataExchange, arg0, arg1, arg2, arg3); if (!eventDataExchange.getHasOverride()) super.enforcePermission(arg0, arg1, arg2, arg3);
    }
    //@Override
    public void enforceUriPermission(android.net.Uri arg0, int arg1, int arg2, int arg3, java.lang.String arg4) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("enforceUriPermission", eventDataExchange, arg0, arg1, arg2, arg3, arg4); if (!eventDataExchange.getHasOverride()) super.enforceUriPermission(arg0, arg1, arg2, arg3, arg4);
    }
    //@Override
    public void enforceUriPermission(android.net.Uri arg0, java.lang.String arg1, java.lang.String arg2, int arg3, int arg4, int arg5, java.lang.String arg6) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("enforceUriPermission7", eventDataExchange, arg0, arg1, arg2, arg3, arg4, arg5, arg6); if (!eventDataExchange.getHasOverride()) super.enforceUriPermission(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    //@Override
    public void grantUriPermission(java.lang.String arg0, android.net.Uri arg1, int arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("grantUriPermission", eventDataExchange, arg0, arg1, arg2); if (!eventDataExchange.getHasOverride()) super.grantUriPermission(arg0, arg1, arg2);
    }
    //@Override
    public void removeStickyBroadcast(android.content.Intent arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("removeStickyBroadcast", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.removeStickyBroadcast(arg0);
    }
    //@Override
    public void removeStickyBroadcastAsUser(android.content.Intent arg0, android.os.UserHandle arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("removeStickyBroadcastAsUser", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.removeStickyBroadcastAsUser(arg0, arg1);
    }
    //@Override
    public void revokeSelfPermissionsOnKill(java.util.Collection arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("revokeSelfPermissionsOnKill", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.revokeSelfPermissionsOnKill(arg0);
    }
    //@Override
    public void revokeUriPermission(android.net.Uri arg0, int arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("revokeUriPermission", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.revokeUriPermission(arg0, arg1);
    }
    //@Override
    public void revokeUriPermission(java.lang.String arg0, android.net.Uri arg1, int arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("revokeUriPermission3", eventDataExchange, arg0, arg1, arg2); if (!eventDataExchange.getHasOverride()) super.revokeUriPermission(arg0, arg1, arg2);
    }
    //@Override
    public void sendBroadcast(android.content.Intent arg0, java.lang.String arg1, android.os.Bundle arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("sendBroadcast", eventDataExchange, arg0, arg1, arg2); if (!eventDataExchange.getHasOverride()) super.sendBroadcast(arg0, arg1, arg2);
    }
    //@Override
    public void sendBroadcast(android.content.Intent arg0, java.lang.String arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("sendBroadcast2", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.sendBroadcast(arg0, arg1);
    }
    //@Override
    public void sendBroadcast(android.content.Intent arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("sendBroadcast1_2", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.sendBroadcast(arg0);
    }
    //@Override
    public void sendBroadcastAsUser(android.content.Intent arg0, android.os.UserHandle arg1, java.lang.String arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("sendBroadcastAsUser", eventDataExchange, arg0, arg1, arg2); if (!eventDataExchange.getHasOverride()) super.sendBroadcastAsUser(arg0, arg1, arg2);
    }
    //@Override
    public void sendBroadcastAsUser(android.content.Intent arg0, android.os.UserHandle arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("sendBroadcastAsUser2", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.sendBroadcastAsUser(arg0, arg1);
    }
    //@Override
    public void sendOrderedBroadcast(android.content.Intent arg0, int arg1, java.lang.String arg2, java.lang.String arg3, android.content.BroadcastReceiver arg4, android.os.Handler arg5, java.lang.String arg6, android.os.Bundle arg7, android.os.Bundle arg8) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("sendOrderedBroadcast", eventDataExchange, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); if (!eventDataExchange.getHasOverride()) super.sendOrderedBroadcast(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    }
    //@Override
    public void sendOrderedBroadcast(android.content.Intent arg0, java.lang.String arg1, android.content.BroadcastReceiver arg2, android.os.Handler arg3, int arg4, java.lang.String arg5, android.os.Bundle arg6) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("sendOrderedBroadcast7", eventDataExchange, arg0, arg1, arg2, arg3, arg4, arg5, arg6); if (!eventDataExchange.getHasOverride()) super.sendOrderedBroadcast(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    //@Override
    public void sendOrderedBroadcast(android.content.Intent arg0, java.lang.String arg1, android.os.Bundle arg2, android.content.BroadcastReceiver arg3, android.os.Handler arg4, int arg5, java.lang.String arg6, android.os.Bundle arg7) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("sendOrderedBroadcast8_2", eventDataExchange, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); if (!eventDataExchange.getHasOverride()) super.sendOrderedBroadcast(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    }
    //@Override
    public void sendOrderedBroadcast(android.content.Intent arg0, java.lang.String arg1, android.os.Bundle arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("sendOrderedBroadcast3_3", eventDataExchange, arg0, arg1, arg2); if (!eventDataExchange.getHasOverride()) super.sendOrderedBroadcast(arg0, arg1, arg2);
    }
    //@Override
    public void sendOrderedBroadcast(android.content.Intent arg0, java.lang.String arg1, java.lang.String arg2, android.content.BroadcastReceiver arg3, android.os.Handler arg4, int arg5, java.lang.String arg6, android.os.Bundle arg7) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("sendOrderedBroadcast8_4", eventDataExchange, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); if (!eventDataExchange.getHasOverride()) super.sendOrderedBroadcast(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    }
    //@Override
    public void sendOrderedBroadcast(android.content.Intent arg0, java.lang.String arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("sendOrderedBroadcast2_5", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.sendOrderedBroadcast(arg0, arg1);
    }
    //@Override
    public void sendOrderedBroadcastAsUser(android.content.Intent arg0, android.os.UserHandle arg1, java.lang.String arg2, android.content.BroadcastReceiver arg3, android.os.Handler arg4, int arg5, java.lang.String arg6, android.os.Bundle arg7) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("sendOrderedBroadcastAsUser", eventDataExchange, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); if (!eventDataExchange.getHasOverride()) super.sendOrderedBroadcastAsUser(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    }
    //@Override
    public void sendStickyBroadcast(android.content.Intent arg0, android.os.Bundle arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("sendStickyBroadcast", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.sendStickyBroadcast(arg0, arg1);
    }
    //@Override
    public void sendStickyBroadcast(android.content.Intent arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("sendStickyBroadcast1", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.sendStickyBroadcast(arg0);
    }
    //@Override
    public void sendStickyBroadcastAsUser(android.content.Intent arg0, android.os.UserHandle arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("sendStickyBroadcastAsUser", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) super.sendStickyBroadcastAsUser(arg0, arg1);
    }
    //@Override
    public void sendStickyOrderedBroadcast(android.content.Intent arg0, android.content.BroadcastReceiver arg1, android.os.Handler arg2, int arg3, java.lang.String arg4, android.os.Bundle arg5) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("sendStickyOrderedBroadcast", eventDataExchange, arg0, arg1, arg2, arg3, arg4, arg5); if (!eventDataExchange.getHasOverride()) super.sendStickyOrderedBroadcast(arg0, arg1, arg2, arg3, arg4, arg5);
    }
    //@Override
    public void sendStickyOrderedBroadcastAsUser(android.content.Intent arg0, android.os.UserHandle arg1, android.content.BroadcastReceiver arg2, android.os.Handler arg3, int arg4, java.lang.String arg5, android.os.Bundle arg6) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("sendStickyOrderedBroadcastAsUser", eventDataExchange, arg0, arg1, arg2, arg3, arg4, arg5, arg6); if (!eventDataExchange.getHasOverride()) super.sendStickyOrderedBroadcastAsUser(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    }
    //@Override
    public void updateServiceGroup(android.content.ServiceConnection arg0, int arg1, int arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("updateServiceGroup", eventDataExchange, arg0, arg1, arg2); if (!eventDataExchange.getHasOverride()) super.updateServiceGroup(arg0, arg1, arg2);
    }
    //@Override
    public void applyOverrideConfiguration(android.content.res.Configuration arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("applyOverrideConfiguration", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) super.applyOverrideConfiguration(arg0);
    }

}